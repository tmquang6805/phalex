<?php

namespace PhalexTest\Loader;

use Phalex\Loader\Autoloader;
use Phalex\Di\Di;
use Phalex\Mvc\Module;
use Application\Router\ConvertId;
use Backend\Router\LowerCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-11 at 23:06:37.
 */
class AutoloaderTest extends \PHPUnit_Framework_TestCase
{
    public function testConstruct()
    {
        $di = new Di(require './tests/config/config.result.php');
        new Autoloader($di);

        $this->assertTrue(isset($di['autoloaderEventsManager']));
        $this->assertTrue($di->has('autoloaderEventsManager'));
    }

    public function testRegister()
    {
        $moduleHandlerMock = $this->getMockBuilder(Module::class)
                ->disableOriginalConstructor()
                ->getMock();
        $moduleHandlerMock->expects($this->once())
                ->method('getModulesAutoloadConfig')
                ->will($this->returnValue(require './tests/config/autoload.result.php'));

        $diMock = $this->getMockBuilder(Di::class)
                ->disableOriginalConstructor()
                ->getMock();
        $diMock->expects($this->once())
                ->method('get')
                ->with('moduleHandler')
                ->will($this->returnValue($moduleHandlerMock));
        $loader = new Autoloader($diMock);

        $this->assertFalse(class_exists(ConvertId::class));

        $loader->register();

        $this->assertTrue(class_exists(ConvertId::class));

        $loader->unregister();
    }

    public function testEvent()
    {
        $autoload = require './tests/config/autoload.result.php';
        $autoload['namespaces']['Backend\\Router'] = getcwd() . '/tests/module/Backend/src/Router';

        $moduleHandlerMock = $this->getMockBuilder(Module::class)
                ->disableOriginalConstructor()
                ->getMock();
        $moduleHandlerMock->expects($this->once())
                ->method('getModulesAutoloadConfig')
                ->will($this->returnValue($autoload));
        
        $di     = new Di(require './tests/config/config.result.php');
        $di->set('moduleHandler', $moduleHandlerMock);
        $loader = new Autoloader($di);
        
        $trace = array();
        $di['autoloaderEventsManager']->attach('loader', function ($event, $loader) use (&$trace) {
            if (!isset($trace[$event->getType()])) {
                $trace[$event->getType()] = array();
            }
            $trace[$event->getType()][] = $loader->getCheckedPath();
        });
        

        $loader->register();

        // Call class
        new LowerCase();
        $cwd = getcwd();
        $this->assertEquals($trace, array(
            'beforeCheckClass' => array(
                null,
            ),
            'beforeCheckPath' => array(
                $cwd . '/tests/module/Backend/src/Router/LowerCase.php',
            ),
            'pathFound' => array(
                $cwd . '/tests/module/Backend/src/Router/LowerCase.php',
            ),
        ));
        $loader->unregister();
    }
}
